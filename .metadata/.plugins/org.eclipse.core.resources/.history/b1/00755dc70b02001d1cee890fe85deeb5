package ArvoreBinaria;

import java.util.ArrayList;
import java.util.Iterator;

import ArvoreSimples.InvalidNoException;
import ArvoreBinaria.No;

public class ArvoreBinaria {
	//Atributos da �rvore
	No raiz;
	int tamanho;
	Comparador comp = new Comparador();
	
	//Construtor
	public ArvoreBinaria(Object o){
		raiz = new No(null, o);
		tamanho = 1;
	}
	
	/** Retorna a raiz da �rvore */
	public No root(){
		return raiz;
	}
	
	/** Retorna o No pai de um No */
	public No parent(No v){
		return (v.parent());
	}

	/** retorna os filhos de um No */
	public Iterator children(No v){
		return v.children();
	}
	
	/** Testa se um No � interno */
	public boolean isInternal(No v){
		return (v.childrenNumber() > 0);
	}
	
	/** Testa se um No � externo*/
	public boolean isExternal(No v){
		return (v.childrenNumber() == 0);
	}
	
	/** Testa se um No � a raiz */
	public boolean isRoot(No v){
		return v == raiz;
	}
	
	/** Adiciona um filho a um No */
	public void addChild(No v, Object o){
		No novo = new No(v, o);
		int x = comp.comparar((int) o,(int) v.element());
		
		if(x>0) {
			if(v.getRight()!=null)addChild(v.getRight(),o);
			else v.addRight(novo);
		}
		if(x<0) {
			if(v.getLeft()!=null)addChild(v.getLeft(),o);
			else v.addLeft(novo);
		}
		
	}
	
	/** Remove um No
	 *  S� pode remover Nos externos e que tenham um pai (n�o seja raiz)
	*/
	public Object remove(No v) throws InvalidNoException{
		No pai = v.parent();
		int x = comp.comparar(v.element(), pai.element());
		
		if (pai != null && isExternal(v)) {
			if(x<0)
				pai.removeLeft(v);
			else
				pai.removeRight(v);
		}
		else if(isInternal(v)) {
			if(x<0) {
				pai.addLeft(v.getLeft());
				v.getLeft().setParent(pai);
				v.getLeft().addRight(v.getRight());

			}else if(x>0){
				pai.addRight(v.getLeft());
				v.getLeft().setParent(pai);
				v.getLeft().addRight(v.getRight());
			}
		}
		else
			throw new InvalidNoException();
		Object o = v.element();
		tamanho--;
		return o;
	}
	
	/** Troca dois elementos de posi��o 
	 * @throws InvalidNoException */
	public void swapElements(No v, No w) throws InvalidNoException{
		/*M�todo que serve de exerc�cio
		 * Este m�todo dever� fazer com que o objeto
		 * que estava na posi��o v fique na posi��o w
		 * e fazer com que o objeto que estava na posi��o w
		 * fique na posi��o v
		 */  
		int l = 0;
		if(w.getLeft()!=null)l=(int) w.getLeft().element();
		
		int 	c = comp.comparar(v.element(),l),
				c2 = comp.comparar(v.element(),w.getRight().element());
		if(c<0 || c2>0) {
			throw new InvalidNoException();
		}else {
			Object x = v.element();
			v.setElement(w.element());
			w.setElement(x);
		}
		
	}
	
	/** Retorna a profundidade de um No */
	public int depth(No v){
		int profundidade = profundidade(v);
		return profundidade;
	}
	private int profundidade(No v){
		if (v == raiz)
			return 0;
		else
			return 1 + profundidade(v.parent());
	}
	
	/** Retorna a altura da �rvore */
	public int height(No v){
		// M�todo que serve de exerc�cio
		if(isExternal(v)) {
			return 0;
		}else {
		int altura = 0;
		Iterator i = children(v);
		while(i.hasNext()) {
			No w = (No) i.next();
			altura += height(w);
		}
		return altura+1;
		}
	}
	
	/** Retorna um iterator com os elementos armazenados na �rvore */
	public Iterator elements(){
		Iterator i = raiz.children();
		ArrayList<Object> a = new ArrayList();
		a.add(raiz.element());
		while(i.hasNext()) {
			Iterator o = i;
			while(i.hasNext()) {
				No n = (No) i.next();
				a.add(n.element());
				i = n.children();
			}
			i=o;
		}
		return a.iterator();
	}
	
	/** Retorna um iterator com as posi��es (Nos) da �rvore */
	public Iterator Nos(){
		// M�todo que serve de exerc�cio
		Iterator i = raiz.children();
		ArrayList<No> a = new ArrayList();
		a.add(raiz);
		while(i.hasNext()) {
			Iterator o = i;
			while(i.hasNext()) {
				No n = (No) i.next();
				a.add(n);
				i = n.children();
			}
			i=o;
		}
		return a.iterator();
	}
	
	/** Retorna o n�mero de Nos da �rvore*/
	public int size(){
		return tamanho;
	}
	
	/** Retorna se a �vore est� vazia. Sempre vai ser falso, pois n�o permitimos remover a raiz*/
	public boolean isEmpty(){
		return tamanho==0;
	}
	
	public Object replace(No v, Object o){
	 // M�todo que serve de exerc�cio
		Object x = v.element();
		v.setElement(o);
		return x;
	}
	
	public No busca(No v, Object o) {
		int x = comp.comparar( o, v.element());
		if(isExternal(v)) return v;
		if(x<0)
			return busca(v.getLeft(),o);
		else if(o==v.element())
			return v;
		else
			return busca(v.getRight(),o);
	}
	
	public void print() {
		
	}

}
